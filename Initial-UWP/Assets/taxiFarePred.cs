// This file was automatically generated by VS extension Windows Machine Learning Code Generator v3
// from model file taxiFarePred.onnx
// Warning: This file may get overwritten if you add add an onnx file with the same name
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Media;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.AI.MachineLearning;
namespace Initial_UWP
{
    
    public sealed class taxiFarePredInput
    {
        public TensorFloat PassengerCount; // shape(-1,1)
        public TensorFloat TripTime; // shape(-1,1)
        public TensorFloat TripDistance; // shape(-1,1)
        public TensorFloat FareAmount; // shape(-1,1)
    }
    
    public sealed class taxiFarePredOutput
    {
        public TensorFloat PassengerCount0output; // shape(-1,1)
        public TensorFloat TripTime0output; // shape(-1,1)
        public TensorFloat TripDistance0output; // shape(-1,1)
        public TensorFloat FareAmount0output; // shape(-1,1)
        public TensorFloat Features0output; // shape(-1,3)
        public TensorInt64Bit mlnet0Features0unusedOutput; // shape(-1,1)
        public TensorFloat Score0output; // shape(-1,1)
    }
    
    public sealed class taxiFarePredModel
    {
        private LearningModel model;
        private LearningModelSession session;
        private LearningModelBinding binding;
        public static async Task<taxiFarePredModel> CreateFromStreamAsync(IRandomAccessStreamReference stream)
        {
            taxiFarePredModel learningModel = new taxiFarePredModel();
            learningModel.model = await LearningModel.LoadFromStreamAsync(stream);
            learningModel.session = new LearningModelSession(learningModel.model);
            learningModel.binding = new LearningModelBinding(learningModel.session);
            return learningModel;
        }
        public async Task<taxiFarePredOutput> EvaluateAsync(taxiFarePredInput input)
        {
            binding.Bind("PassengerCount", input.PassengerCount);
            binding.Bind("TripTime", input.TripTime);
            binding.Bind("TripDistance", input.TripDistance);
            binding.Bind("FareAmount", input.FareAmount);
            var result = await session.EvaluateAsync(binding, "0");
            var output = new taxiFarePredOutput();
            output.PassengerCount0output = result.Outputs["PassengerCount.output"] as TensorFloat;
            output.TripTime0output = result.Outputs["TripTime.output"] as TensorFloat;
            output.TripDistance0output = result.Outputs["TripDistance.output"] as TensorFloat;
            output.FareAmount0output = result.Outputs["FareAmount.output"] as TensorFloat;
            output.Features0output = result.Outputs["Features.output"] as TensorFloat;
            output.mlnet0Features0unusedOutput = result.Outputs["mlnet.Features.unusedOutput"] as TensorInt64Bit;
            output.Score0output = result.Outputs["Score.output"] as TensorFloat;
            return output;
        }
    }
}

